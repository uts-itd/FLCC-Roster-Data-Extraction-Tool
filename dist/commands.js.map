{"version":3,"file":"commands.js","mappings":";qCAIA,SAASA,EAAYC,GACpB,IAAMC,EAAmBD,EAAUE,QAAQ,KAE3C,OAAID,GAAoB,EAChBD,EAAUG,UAAU,EAAGF,EAAmB,GAAGG,OAE9CJ,EAAUI,MAClB,CAMA,SAASC,EAAoBL,GAC5B,IAEIM,EAAUN,EAAUO,MAFR,uGAOhB,OAFY,OAAZD,EAAgCA,EAAuBA,EAAQ,EAGhE,CAKA,SAASE,EAAYC,GACpB,IAAIC,EAAgBD,EAAWE,MAAM,KAKrC,OAHWD,EAAc,GAAK,EAChBA,EAAc,GAAK,EAGlC,CA2BA,SAASE,EAAiBZ,GACzB,IAEIM,EAAUN,EAAUO,MAFR,mCAIhB,OAAOD,EAAUA,EAAQ,GAAK,IAC/B,CAKA,SAASO,EAAaC,EAAaC,GAClC,IAGMT,EAHgBS,EAAeC,OAAO,GAAGF,GAGfP,MAFhB,mBAIhB,IAGC,OAFwBD,EAAQ,GAAGK,MAAM,KAEhBM,KAAI,SAAAC,GAAO,OAAIC,OAAOD,EAAQ,GACxD,CAAE,MAAOE,GAER,OAAO,IACR,CACD,CAmGAC,EAAOC,QAAU,CAChBvB,YAAAA,EACAM,oBAAAA,EACAG,YAAAA,EACAe,kBAtJD,SAA2BC,GAC1B,IAAMC,EAAWC,KAAKC,MAAMH,EAAS,OAIrC,OAFkB,IAAII,KADO,MAAXH,EACqB,IAGxC,EAiJCI,wBA5ID,SAAiCC,GAChC,IAAIC,EAAgBD,EAAmBE,QAAQ,QAAS,OAIxD,OAHAD,EAAgBA,EAAcC,QAAQ,OAAQ,QAChBA,QAAQ,IAAK,IAG5C,EAuICpB,iBAAAA,EACAC,aAAAA,EACAoB,kBAtGD,SAA2BC,EAAOnB,GACjC,IAAMoB,EAAOD,EAAMC,KAAKC,MAClBC,EAAa,GAEfC,EAAO,IAAIV,KAAKA,KAAKW,MAAMxB,EAAeC,OAAO,GAAG,KAAKwB,mBAAmB,SAuFhF,OArFAL,EAAKM,SAAQ,SAAAC,GAIZ,IAHA,IAAIC,EAAeD,EAAI1B,OAAO,GAAG,GAGxB4B,EAAW,EAAGA,GAAYV,EAAMW,QAAQC,MAAQ,EAAGF,IAAY,CACvE,IAAI5C,EAAY0C,EAAI1B,OAAO,GAAG4B,GAE9B,GAAkB,KAAd5C,EAAkB,CACrB,IAAI+C,EAAOhD,EAAYC,GAEnBgD,EAAYnC,EAAa+B,EAAU7B,GACnCkC,EAAoB5C,EAAoBL,GACxCkD,EAAkBtC,EAAiBZ,GAEnCmD,EAAc,mBAGlB,GAAID,EAAiB,CAEpB,IAAIE,EAAa5C,EAAY0C,EAAgB3C,MAAM4C,GAAa,IAC5DE,EAAWD,EAAa,GAAK,GAChCA,EAAa,GAAK,GAClBA,EAAa,GAGVE,EAAYD,EAAWD,EAC1BC,EAAWD,EACXC,EAAW,GAAKD,EAGbG,EAAYP,EAAU,GAAKI,EAC9BjC,OAAO6B,EAAU,IACjBK,EACGG,EAAUR,EAAU,IAAMK,EAC7BD,EACAjC,OAAO6B,EAAU,IAGdS,EAAOD,EAAUD,EACpBC,EAAUD,EACVG,QAAU,GAAKH,EAGZH,EAAaG,GAChBlB,EAAWsB,KAAK,CACfZ,EAAM,QAAST,EAAMc,EAAYC,EAAUC,EAAWtD,IAGvDqC,EAAWsB,KAAK,CACfZ,EAAMJ,EAAcL,EAAMiB,EAAWC,EAASC,EAAMzD,MAGrDqC,EAAWsB,KAAK,CACfZ,EAAMJ,EAAcL,EAAMiB,EAAWC,EAASC,EAAMzD,IAGrDqC,EAAWsB,KAAK,CACfZ,EAAM,QAAST,EAAMc,EAAYC,EAAUC,EAAWtD,IAGzD,KAAO,CACN,IAAIuD,EAAYpC,OAAO6B,EAAU,IAC7BQ,EAAUrC,OAAO6B,EAAU,IAE3BC,KACCA,EAAkBW,WAAW,UAAYX,EAAkBW,WAAW,WACzEL,EAAY/C,EAAYyC,EAAkB1C,MAAM4C,GAAa,MAE1DF,EAAkBW,WAAW,WAAaX,EAAkBW,WAAW,YAC1EJ,EAAUhD,EAAYyC,EAAkB1C,MAAM4C,GAAa,MAI7D,IAAIM,EAAOD,EAAUD,EACpBC,EAAUD,EACVC,EAAU,GAAKD,EAEhBlB,EAAWsB,KAAK,CACfZ,EAAMJ,EAAcL,EAAMiB,EAAWC,EAASC,EAAMzD,GAEtD,CACD,CACD,CACD,IAEOqC,CACR,KC1LIwB,EAA2B,CAAC,eCAhC,IAAAC,EAAAC,EAAAC,EAAA,mBAAAC,OAAAA,OAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,aAAA,yBAAAC,EAAAN,EAAAE,EAAAE,EAAAE,GAAA,IAAAC,EAAAL,GAAAA,EAAAM,qBAAAC,EAAAP,EAAAO,EAAAC,EAAAC,OAAAC,OAAAL,EAAAC,WAAA,OAAAK,EAAAH,EAAA,mBAAAV,EAAAE,EAAAE,GAAA,IAAAE,EAAAC,EAAAG,EAAAI,EAAA,EAAAC,EAAAX,GAAA,GAAAY,GAAA,EAAAC,EAAA,CAAAF,EAAA,EAAAb,EAAA,EAAAgB,EAAApB,EAAAqB,EAAAC,EAAAN,EAAAM,EAAAC,KAAAvB,EAAA,GAAAsB,EAAA,SAAArB,EAAAC,GAAA,OAAAM,EAAAP,EAAAQ,EAAA,EAAAG,EAAAZ,EAAAmB,EAAAf,EAAAF,EAAAmB,CAAA,YAAAC,EAAApB,EAAAE,GAAA,IAAAK,EAAAP,EAAAU,EAAAR,EAAAH,EAAA,GAAAiB,GAAAF,IAAAV,GAAAL,EAAAgB,EAAAO,OAAAvB,IAAA,KAAAK,EAAAE,EAAAS,EAAAhB,GAAAqB,EAAAH,EAAAF,EAAAQ,EAAAjB,EAAA,GAAAN,EAAA,GAAAI,EAAAmB,IAAArB,KAAAQ,EAAAJ,GAAAC,EAAAD,EAAA,OAAAC,EAAA,MAAAD,EAAA,GAAAA,EAAA,GAAAR,GAAAQ,EAAA,IAAAc,KAAAhB,EAAAJ,EAAA,GAAAoB,EAAAd,EAAA,KAAAC,EAAA,EAAAU,EAAAC,EAAAhB,EAAAe,EAAAf,EAAAI,EAAA,IAAAc,EAAAG,IAAAnB,EAAAJ,EAAA,GAAAM,EAAA,GAAAJ,GAAAA,EAAAqB,KAAAjB,EAAA,GAAAN,EAAAM,EAAA,GAAAJ,EAAAe,EAAAf,EAAAqB,EAAAhB,EAAA,OAAAH,GAAAJ,EAAA,SAAAmB,EAAA,MAAAH,GAAA,EAAAd,CAAA,iBAAAE,EAAAW,EAAAQ,GAAA,GAAAT,EAAA,QAAAU,UAAA,oCAAAR,GAAA,IAAAD,GAAAK,EAAAL,EAAAQ,GAAAhB,EAAAQ,EAAAL,EAAAa,GAAAxB,EAAAQ,EAAA,EAAAT,EAAAY,KAAAM,GAAA,CAAAV,IAAAC,EAAAA,EAAA,GAAAA,EAAA,IAAAU,EAAAf,GAAA,GAAAkB,EAAAb,EAAAG,IAAAO,EAAAf,EAAAQ,EAAAO,EAAAC,EAAAR,GAAA,OAAAI,EAAA,EAAAR,EAAA,IAAAC,IAAAH,EAAA,QAAAL,EAAAO,EAAAF,GAAA,MAAAL,EAAAA,EAAA0B,KAAAnB,EAAAI,IAAA,MAAAc,UAAA,wCAAAzB,EAAA2B,KAAA,OAAA3B,EAAAW,EAAAX,EAAA4B,MAAApB,EAAA,IAAAA,EAAA,YAAAA,IAAAR,EAAAO,EAAAsB,SAAA7B,EAAA0B,KAAAnB,GAAAC,EAAA,IAAAG,EAAAc,UAAA,oCAAApB,EAAA,YAAAG,EAAA,GAAAD,EAAAR,CAAA,UAAAC,GAAAiB,EAAAC,EAAAf,EAAA,GAAAQ,EAAAV,EAAAyB,KAAAvB,EAAAe,MAAAE,EAAA,YAAApB,GAAAO,EAAAR,EAAAS,EAAA,EAAAG,EAAAX,CAAA,SAAAe,EAAA,UAAAa,MAAA5B,EAAA2B,KAAAV,EAAA,GAAAhB,EAAAI,EAAAE,IAAA,GAAAI,CAAA,KAAAS,EAAA,YAAAV,IAAA,UAAAoB,IAAA,UAAAC,IAAA,CAAA/B,EAAAY,OAAAoB,eAAA,IAAAxB,EAAA,GAAAL,GAAAH,EAAAA,EAAA,GAAAG,QAAAW,EAAAd,EAAA,GAAAG,GAAA,0BAAAH,GAAAW,EAAAoB,EAAAtB,UAAAC,EAAAD,UAAAG,OAAAC,OAAAL,GAAA,SAAAO,EAAAhB,GAAA,OAAAa,OAAAqB,eAAArB,OAAAqB,eAAAlC,EAAAgC,IAAAhC,EAAAmC,UAAAH,EAAAjB,EAAAf,EAAAM,EAAA,sBAAAN,EAAAU,UAAAG,OAAAC,OAAAF,GAAAZ,CAAA,QAAA+B,EAAArB,UAAAsB,EAAAjB,EAAAH,EAAA,cAAAoB,GAAAjB,EAAAiB,EAAA,cAAAD,GAAAA,EAAAK,YAAA,oBAAArB,EAAAiB,EAAA1B,EAAA,qBAAAS,EAAAH,GAAAG,EAAAH,EAAAN,EAAA,aAAAS,EAAAH,EAAAR,GAAA,0BAAAW,EAAAH,EAAA,sDAAAyB,EAAA,kBAAAC,EAAA9B,EAAA+B,EAAAvB,EAAA,cAAAD,EAAAf,EAAAE,EAAAE,EAAAH,GAAA,IAAAO,EAAAK,OAAA2B,eAAA,IAAAhC,EAAA,gBAAAR,GAAAQ,EAAA,EAAAO,EAAA,SAAAf,EAAAE,EAAAE,EAAAH,GAAA,GAAAC,EAAAM,EAAAA,EAAAR,EAAAE,EAAA,CAAA2B,MAAAzB,EAAAqC,YAAAxC,EAAAyC,cAAAzC,EAAA0C,UAAA1C,IAAAD,EAAAE,GAAAE,MAAA,KAAAE,EAAA,SAAAJ,EAAAE,GAAAW,EAAAf,EAAAE,GAAA,SAAAF,GAAA,YAAA4C,QAAA1C,EAAAE,EAAAJ,EAAA,KAAAM,EAAA,UAAAA,EAAA,WAAAA,EAAA,cAAAS,EAAAf,EAAAE,EAAAE,EAAAH,EAAA,UAAA4C,EAAAzC,EAAAH,EAAAD,EAAAE,EAAAI,EAAAe,EAAAZ,GAAA,QAAAD,EAAAJ,EAAAiB,GAAAZ,GAAAG,EAAAJ,EAAAqB,KAAA,OAAAzB,GAAA,YAAAJ,EAAAI,EAAA,CAAAI,EAAAoB,KAAA3B,EAAAW,GAAAkC,QAAAC,QAAAnC,GAAAoC,KAAA9C,EAAAI,EAAA,UAAA2C,EAAA7C,GAAA,sBAAAH,EAAA,KAAAD,EAAAkD,UAAA,WAAAJ,SAAA,SAAA5C,EAAAI,GAAA,IAAAe,EAAAjB,EAAA+C,MAAAlD,EAAAD,GAAA,SAAAoD,EAAAhD,GAAAyC,EAAAxB,EAAAnB,EAAAI,EAAA8C,EAAAC,EAAA,OAAAjD,EAAA,UAAAiD,EAAAjD,GAAAyC,EAAAxB,EAAAnB,EAAAI,EAAA8C,EAAAC,EAAA,QAAAjD,EAAA,CAAAgD,OAAA,OADA,IAAME,EDIN,SAASC,EAAoBC,GAE5B,IAAIC,EAAe1D,EAAyByD,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAajG,QAGrB,IAAID,EAASwC,EAAyByD,GAAY,CAGjDhG,QAAS,CAAC,GAOX,OAHAmG,EAAoBH,GAAUjG,EAAQA,EAAOC,QAAS+F,GAG/ChG,EAAOC,OACf,CCtBcoG,CAAQ,OAYI,SAAAC,IAyEzB,OAzEyBA,EAAAZ,EAAAZ,IAAAE,GAA1B,SAAAuB,EAA2BC,GAAK,OAAA1B,IAAAC,GAAA,SAAA0B,GAAA,cAAAA,EAAA5D,GAAA,cAAA4D,EAAA5D,EAAA,EACzB6D,MAAMC,IAAG,eAAAC,EAAAlB,EAAAZ,IAAAE,GAAC,SAAA6B,EAAOC,GAAO,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAnG,EAAA,OAAA8D,IAAAC,GAAA,SAAAqC,GAAA,cAAAA,EAAAvE,GAAA,OAa3B,OAZYiE,EAAQO,SAASC,MACzBP,EAASD,EAAQO,SAASN,OAC1BC,EAASF,EAAQO,SAASE,WAGhCT,EAAQO,SAASG,KAChB,0JAMCJ,EAAAvE,EAAA,EAEIiE,EAAQW,OAAM,OASjB,OANGR,EAAkB,GAExBF,EAAOhG,MAAMK,SAAQ,SAAAP,GACpB,IAAMnB,EAAiBmB,EAAM6G,oBAAoBF,KAAK,UAEtDP,EAAgB3E,KAAM,CAAEqF,UAAW9G,EAAMa,KAAMhC,eAAgBA,GAChE,IAAG0H,EAAAvE,EAAA,EAEGiE,EAAQW,OAAM,OAGdP,EAAa,GAEnBH,EAAOhG,MAAMK,SAAQ,SAAAP,GACpB,IAEI5B,EAAU4B,EAAMa,KAAKxC,MAFT,oDAIbD,GACFiI,EAAW5E,KAAKrD,EAAQ,GAC1B,IAGIiI,EAAWjD,OAAS,IAEvB2D,EAAsBZ,GAAQa,WAGxBV,EAAkBW,EAAsBf,GAG1C/F,EAAa,GAEjBkG,EAAW9F,SAAQ,SAAAuG,GAClB,IACC,IAAII,EAAchB,EAAOhG,MAAMiH,MAAK,SAAAC,GAAI,OAAIA,EAAKvG,OAASiG,CAAS,IAC/DO,EAASjB,EAAgBe,MAAK,SAAAE,GAAM,OAAIA,EAAOP,YAAcA,CAAS,IACtEQ,EAAsBpC,EAAMnF,kBAAkBmH,EAAaG,EAAOxI,gBAEtEsB,EAAaA,EAAWoH,OAAOD,EAChC,CAAE,MAAOpI,GACRsI,QAAQC,IAAI,GAADF,OAAIT,EAAS,cACzB,CACD,IAEAR,EAAgBrG,KAAKyH,IAAI,KAAMvH,GAG/BmG,EAAgBqB,WAAWC,OAAOC,iBAClCvB,EAAgB3F,QAAQmH,QAAQ,QAAQC,mBAAmBC,aAAe,cAG3ErC,EAAMsC,YAAY,cAAA1B,EAAAtD,EAAA,MAAA+C,EAAA,KAClB,gBAAAkC,GAAA,OAAAnC,EAAAhB,MAAA,KAAAD,UAAA,EAvEc,IAuEb,cAAAc,EAAA3C,EAAA,MAAAyC,EAAA,KACFD,EAAAV,MAAA,KAAAD,UAAA,CAED,SAASiC,EAAsBZ,GAC9B,IAAMgC,EAAa,cAGfC,EAAkBjC,EAAOjG,MAAMiH,MAAK,SAAAkB,GAAK,OAAIA,EAAMxH,OAASsH,CAAU,IAK1E,YAHwB7C,IAApB8C,IACHA,EAAkBjC,EAAOuB,IAAIS,IAEvBC,CACR,CAEA,SAASnB,EAAsBf,GAC9B,IAAMY,EAAY,aAGdwB,EAAYpC,EAAOhG,MAAMiH,MAAK,SAAAC,GAAI,OAAIA,EAAKvG,OAASiG,CAAS,IAYjE,YAVkBxB,IAAdgD,IACHA,EAAYpC,EAAOwB,IAAI,uBAAuB,IAEpC7G,KAAOiG,EACjBwB,EAAUzB,oBAAoB/H,OAC7B,CAAC,CAAC,OAAQ,aAAc,OAAQ,QAAS,MAAO,OAAQ,WAEzDwJ,EAAUrI,KAAKsI,WAAWD,EAAUrI,KAAKC,OAGnCoI,CACR,CA5GAE,OAAOC,SAAQ,WACb,IA8GFD,OAAOE,QAAQC,UAAU,eA7GtB,SAEuBC,GAAA,OAAAnD,EAAAV,MAAC,KAADD,UAAA","sources":["webpack://FLCC Roster Data Extraction Tool/./src/commands/frdet.js","webpack://FLCC Roster Data Extraction Tool/webpack/bootstrap","webpack://FLCC Roster Data Extraction Tool/./src/commands/commands.js"],"sourcesContent":["/* \n * Returns the name from a given cell value, removing any additional information found\n * inside the brackets. i.e. John Smith (9am-9.30am) => John Smith\n */\nfunction extractName(cellValue) {\n\tconst parenthesisIndex = cellValue.indexOf('(');\n\n\tif (parenthesisIndex > -1)\n\t\treturn cellValue.substring(0, parenthesisIndex - 1).trim();\n\n\treturn cellValue.trim();\n}\n\n/*\n * Returns the time override string from a given cell value.\n * e.g. John Smith (9.30am-10am) => 9.30am-10am\n */\nfunction extractTimeOverride(cellValue) {\n\tconst pattern = /((from|start|until|finish|lunch)\\s*)?\\d{1,2}.\\d{1,2}(\\s?-\\s?)?((until|finish)?\\s*\\d{1,2}.\\d{1,2})?/g;\n\n\tlet matches = cellValue.match(pattern);\n\tlet timeString;\n\n\tmatches === null ? timeString = matches : timeString = matches[0];\n\n\treturn timeString;\n}\n\n/*\n * Returns a string that can be used for calculating the number of hours. e.g. 9.30 => 9.5\n */\nfunction convertTime(timeString) {\n\tlet timeStringArr = timeString.split('.');\n\n\tlet hour = timeStringArr[0] / 1;\n\tlet minutes = timeStringArr[1] / 60;\n\n\treturn hour + minutes;\n}\n\n/*\n * Returns a date object converted from the Excel date serial number\n */\nfunction excelDateToJSDate(serial) {\n\tconst utc_days = Math.floor(serial - 25569);\n\tconst utc_value = utc_days * 86400;\n\tconst date_info = new Date(utc_value * 1000);\n\n\treturn date_info;\n}\n\n/*\n * \n */\nfunction cleanTimeStringOverride(timeStringOverride) {\n\tlet cleanedString = timeStringOverride.replace('until', 'til');\n\tcleanedString = cleanedString.replace('till', 'til');\n\tcleanedString = cleanedString.replace(':', '.');\n\n\treturn cleanedString;\n}\n\n/*\n * Returns the lunch time from the string otherwise, it return null.\n */\nfunction extractLunchTime(cellValue) {\n\tconst pattern = /\\blunch\\s+(\\d{1,2}[.:]\\d{2})\\b/i;\n\n\tlet matches = cellValue.match(pattern);\n\n\treturn matches ? matches[0] : null;\n}\n\n/*\n * Gets the corresponding time range from the header\n */ \nfunction getTimeRange(columnIndex, headerRowRange) {\n\tlet timeRangeString = headerRowRange.values[0][columnIndex];\n\tconst pattern = /\\d{1,2}-\\d{1,2}/;\n\n\tconst matches = timeRangeString.match(pattern);\n\n\ttry {\n\t\tlet timeRangeStrArray = matches[0].split('-');\n\n\t\treturn timeRangeStrArray.map(timeStr => Number(timeStr));\n\t} catch (error) {\n\n\t\treturn null;\n\t}\n}\n\n/*\n * Returns extracter roster table\n */\nfunction extractRosterData(table, headerRowRange) {\n\tconst rows = table.rows.items;\n\tconst rosterData = [];\n\n\tlet date = new Date(Date.parse(headerRowRange.values[0][0])).toLocaleDateString('en-AU');\n\n\trows.forEach(row => {\n\t\tlet servicePoint = row.values[0][0];\n\n\t\t// loop through cells by column\n\t\tfor (let colIndex = 1; colIndex <= table.columns.count - 1; colIndex++) {\n\t\t\tlet cellValue = row.values[0][colIndex];\n\n\t\t\tif (cellValue !== '') {\n\t\t\t\tlet name = extractName(cellValue);\n\n\t\t\t\tlet timeRange = getTimeRange(colIndex, headerRowRange); // e.g. [11-12]\n\t\t\t\tlet timeRangeOverride = extractTimeOverride(cellValue); // e.g. from 11.30 or until 4.30\n\t\t\t\tlet lunchTimeString = extractLunchTime(cellValue); // e.g. lunch 12.30\n\t\t\t\t\n\t\t\t\tlet timePattern = /\\d{1,2}.\\d{1,2}/g;\n\n\t\t\t\t// If there's a lunch time\n\t\t\t\tif (lunchTimeString) {\n\t\t\t\t\t// Get lunch start and end times\n\t\t\t\t\tlet lunchStart = convertTime(lunchTimeString.match(timePattern)[0]);\n\t\t\t\t\tlet lunchEnd = lunchStart + .5 > 12 ?\n\t\t\t\t\t\tlunchStart + .5 - 12 :\n\t\t\t\t\t\tlunchStart + .5;\n\n\t\t\t\t\t// Calculate how long lunch time is\n\t\t\t\t\tlet lunchTime = lunchEnd > lunchStart ?\n\t\t\t\t\t\tlunchEnd - lunchStart :\n\t\t\t\t\t\tlunchEnd + 12 - lunchStart;\n\n\t\t\t\t\t// Get service point start and end times\n\t\t\t\t\tlet startTime = timeRange[0] < lunchStart ?\n\t\t\t\t\t\tNumber(timeRange[0]) :\n\t\t\t\t\t\tlunchEnd;\n\t\t\t\t\tlet endTime = timeRange[1] == lunchEnd ?\n\t\t\t\t\t\tlunchStart :\n\t\t\t\t\t\tNumber(timeRange[1]);\n\n\t\t\t\t\t// Caculate how long service point time is\n\t\t\t\t\tlet time = endTime > startTime ?\n\t\t\t\t\t\tendTime - startTime:\n\t\t\t\t\t\tentTime + 12 - startTime;\n\n\t\t\t\t\t// If lunch time starts BEFORE the service point start\n\t\t\t\t\tif (lunchStart < startTime) {\n\t\t\t\t\t\trosterData.push([\n\t\t\t\t\t\t\tname, 'Lunch', date, lunchStart, lunchEnd, lunchTime, cellValue\n\t\t\t\t\t\t]);\n\n\t\t\t\t\t\trosterData.push([\n\t\t\t\t\t\t\tname, servicePoint, date, startTime, endTime, time, cellValue\n\t\t\t\t\t\t]);\n\t\t\t\t\t} else { // Otherwise, lunch time comes after the service point time\n\t\t\t\t\t\trosterData.push([\n\t\t\t\t\t\t\tname, servicePoint, date, startTime, endTime, time, cellValue\n\t\t\t\t\t\t]);\n\n\t\t\t\t\t\trosterData.push([\n\t\t\t\t\t\t\tname, 'Lunch', date, lunchStart, lunchEnd, lunchTime, cellValue\n\t\t\t\t\t\t]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet startTime = Number(timeRange[0]);\n\t\t\t\t\tlet endTime = Number(timeRange[1]);\n\t\t\t\t\t\n\t\t\t\t\tif (timeRangeOverride) {\n\t\t\t\t\t\tif (timeRangeOverride.startsWith('start') || timeRangeOverride.startsWith('from'))\n\t\t\t\t\t\t\tstartTime = convertTime(timeRangeOverride.match(timePattern)[0]);\n\n\t\t\t\t\t\tif (timeRangeOverride.startsWith('finish') || timeRangeOverride.startsWith('until'))\n\t\t\t\t\t\t\tendTime = convertTime(timeRangeOverride.match(timePattern)[0]);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Calculate the time (hours)\n\t\t\t\t\tlet time = endTime > startTime ?\n\t\t\t\t\t\tendTime - startTime :\n\t\t\t\t\t\tendTime + 12 - startTime;\n\n\t\t\t\t\trosterData.push([\n\t\t\t\t\t\tname, servicePoint, date, startTime, endTime, time, cellValue\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn rosterData;\n}\n\nmodule.exports = {\n\textractName,\n\textractTimeOverride,\n\tconvertTime,\n\texcelDateToJSDate,\n\tcleanTimeStringOverride,\n\textractLunchTime,\n\tgetTimeRange,\n\textractRosterData\n};\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const FRDET = require('./frdet');\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global Office */\n\nOffice.onReady(() => {\n  // If needed, Office.js is ready to be called.\n});\n\nasync function extractData(event) {\n\tawait Excel.run(async (context) => {\n\t\tconst names = context.workbook.names;\n\t\tconst tables = context.workbook.tables;\n\t\tconst sheets = context.workbook.worksheets;\n\n\t\t// load workbook context items\n\t\tcontext.workbook.load(\n\t\t\t'worksheets/items/name' +\n\t\t\t', tables/items/rows/items/values' +\n\t\t\t', tables/items/name' +\n\t\t\t', tables/items/columns/items' +\n\t\t\t', names/items/arrayValues/values' +\n\t\t\t', names/items/name'\n\t\t);\n\n\t\tawait context.sync();\n\n\t\t// Get header row ranges\n\t\tconst headerRowRanges = [];\n\n\t\ttables.items.forEach(table => {\n\t\t\tconst headerRowRange = table.getHeaderRowRange().load('values');\n\n\t\t\theaderRowRanges.push( { tableName: table.name, headerRowRange: headerRowRange } );\n\t\t});\n\n\t\tawait context.sync();\n\n\t\t// define table names\n\t\tconst tableNames = [];\n\t\t\n\t\ttables.items.forEach(table => {\n\t\t\tconst pattern = /(Monday|Tuesday|Wednesday|Thursday|Friday)\\d{1}/g\n\t\t\t\n\t\t\tlet matches = table.name.match(pattern);\n\t\t\t\n\t\t\tif(matches)\n\t\t\t\ttableNames.push(matches[0]);\n\t\t});\n\n\t\t// Only work if there are roster tables\n\t\tif (tableNames.length > 0) {\n\t\t\t// create Roster Data Sheet if it does not exist\n\t\t\tcreateRosterDataSheet(sheets).activate();\n\n\t\t\t// create rosterData table if it does not exist\n\t\t\tconst rosterDataTable = createRosterDataTable(tables);\n\n\t\t\t// define empty roster data\n\t\t\tlet rosterData = [];\n\n\t\t\ttableNames.forEach(tableName => {\n\t\t\t\ttry {\n\t\t\t\t\tlet rosterTable = tables.items.find(item => item.name === tableName);\n\t\t\t\t\tlet header = headerRowRanges.find(header => header.tableName === tableName);\n\t\t\t\t\tlet extractedRosterData = FRDET.extractRosterData(rosterTable, header.headerRowRange);\n\n\t\t\t\t\trosterData = rosterData.concat(extractedRosterData);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.log(`${tableName} not found`);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\trosterDataTable.rows.add(null, rosterData);\n\n\t\t\t// Format table\n\t\t\trosterDataTable.getRange().format.autofitColumns();\n\t\t\trosterDataTable.columns.getItem('Date').getDataBodyRange().numberFormat = 'dd/mm/yyyy';\n\t\t}\n\n\t\tevent.completed();\n\t});\n}\n\nfunction createRosterDataSheet(sheets) {\n\tconst wSheetName = 'Roster Data';\n\n\t// find sheet with wSheetName\n\tlet rosterDataSheet = sheets.items.find(sheet => sheet.name === wSheetName);\n\n\tif (rosterDataSheet === undefined)\n\t\trosterDataSheet = sheets.add(wSheetName);\n\n\treturn rosterDataSheet;\n}\n\nfunction createRosterDataTable(tables) {\n\tconst tableName = 'rosterData';\n\n\t// find table with tableName\n\tlet dataTable = tables.items.find(item => item.name === tableName);\n\n\tif (dataTable === undefined) {\n\t\tdataTable = tables.add(`'Roster Data'!A1:G1`, true);\n\n\t\tdataTable.name = tableName;\n\t\tdataTable.getHeaderRowRange().values = \n\t\t\t[[\"Name\", \"Allocation\", \"Date\", \"Start\", \"End\", \"Time\", \"Value\"]];\n\t} else {\n\t\tdataTable.rows.deleteRows(dataTable.rows.items);\n\t}\n\n\treturn dataTable;\n}\n\n// Register the function with Office.\nOffice.actions.associate(\"extractData\", extractData);\n\n"],"names":["extractName","cellValue","parenthesisIndex","indexOf","substring","trim","extractTimeOverride","matches","match","convertTime","timeString","timeStringArr","split","extractLunchTime","getTimeRange","columnIndex","headerRowRange","values","map","timeStr","Number","error","module","exports","excelDateToJSDate","serial","utc_days","Math","floor","Date","cleanTimeStringOverride","timeStringOverride","cleanedString","replace","extractRosterData","table","rows","items","rosterData","date","parse","toLocaleDateString","forEach","row","servicePoint","colIndex","columns","count","name","timeRange","timeRangeOverride","lunchTimeString","timePattern","lunchStart","lunchEnd","lunchTime","startTime","endTime","time","entTime","push","startsWith","__webpack_module_cache__","e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","return","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","enumerable","configurable","writable","_invoke","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","FRDET","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","require","_extractData","_callee2","event","_context2","Excel","run","_ref","_callee","context","tables","sheets","headerRowRanges","tableNames","rosterDataTable","_context","workbook","names","worksheets","load","sync","getHeaderRowRange","tableName","createRosterDataSheet","activate","createRosterDataTable","rosterTable","find","item","header","extractedRosterData","concat","console","log","add","getRange","format","autofitColumns","getItem","getDataBodyRange","numberFormat","completed","_x2","wSheetName","rosterDataSheet","sheet","dataTable","deleteRows","Office","onReady","actions","associate","_x"],"sourceRoot":""}